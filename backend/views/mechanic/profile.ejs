<div class="container py-4">
  <!-- Breadcrumb -->
  <div class="row">
    <div class="col-md-12 mb-4">
      <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
          <li class="breadcrumb-item"><a href="/mechanic/dashboard">Dashboard</a></li>
          <li class="breadcrumb-item active" aria-current="page">My Profile</li>
        </ol>
      </nav>
    </div>
  </div>

  <div class="row">
    <!-- Left Column -->
    <div class="col-lg-4 mb-4">
      <div class="card border-0 shadow-sm">
        <div class="card-body text-center p-4">
          <div class="avatar-circle-large bg-primary text-white mx-auto mb-3" id="profile-avatar">
            A
          </div>
          <h4 class="mb-1" id="profile-name">Loading...</h4>
          <p class="text-muted mb-3" id="profile-email">Loading...</p>

          <div class="d-flex justify-content-center mb-3">
            <span class="badge bg-success rounded-pill px-3 py-2">
              <i class="fas fa-tools me-1"></i> Mechanic
            </span>
            <span class="badge bg-success rounded-pill px-3 py-2 ms-2" id="profile-availability">
              Available
            </span>
          </div>

          <div class="d-flex justify-content-center mb-3" id="profile-rating-stars">
            <i class="fas fa-star text-muted mx-1"></i>
            <i class="fas fa-star text-muted mx-1"></i>
            <i class="fas fa-star text-muted mx-1"></i>
            <i class="fas fa-star text-muted mx-1"></i>
            <i class="fas fa-star text-muted mx-1"></i>
            <span class="ms-1" id="profile-rating">(0.0)</span>
          </div>

          <div class="border-top pt-3 mt-3">
            <div class="row text-start">
              <div class="col-6 mb-2">
                <p class="text-muted mb-1 small">Member Since</p>
                <p class="mb-0 fw-bold" id="profile-member-since">Loading...</p>
              </div>
              <div class="col-6 mb-2">
                <p class="text-muted mb-1 small">Total Jobs</p>
                <p class="mb-0 fw-bold" id="totalJobs">Loading...</p>
              </div>
              <div class="col-6 mb-2">
                <p class="text-muted mb-1 small">Experience</p>
                <p class="mb-0 fw-bold" id="profile-experience">0 years</p>
              </div>
              <div class="col-6 mb-2">
                <p class="text-muted mb-1 small">Hourly Rate</p>
                <p class="mb-0 fw-bold text-success" id="profile-rate">$0.00</p>
              </div>
            </div>
          </div>

          <div class="mt-3">
            <form action="/mechanic/toggle-availability" method="POST">
              <button type="submit" class="btn btn-success w-100" id="availability-btn">
                <i class="fas fa-check-circle me-2"></i>
                Set as Unavailable
              </button>
            </form>
          </div>
        </div>
      </div>

      <div class="card border-0 shadow-sm mt-4">
        <div class="card-header bg-white">
          <h5 class="mb-0">
            <i class="fas fa-map-marker-alt text-primary me-2"></i>Your Location
          </h5>
        </div>
        <div class="card-body p-0">
          <div id="mechanic-map" style="height: 250px;"></div>
        </div>
      </div>
    </div>

    <!-- Right Column -->
    <div class="col-lg-8">
      <!-- Edit Profile Card -->
      <div class="card border-0 shadow-sm">
        <div class="card-header bg-white d-flex justify-content-between align-items-center">
          <h5 class="mb-0">
            <i class="fas fa-user-edit text-primary me-2"></i>Edit Profile
          </h5>
        </div>
        <div class="card-body p-4">
          <form action="/mechanic/profile" method="POST">
            <div class="row mb-3">
              <div class="col-md-6">
                <label for="name" class="form-label">Full Name</label>
                <div class="input-group">
                  <span class="input-group-text"><i class="fas fa-user"></i></span>
                  <input type="text" class="form-control" id="name" name="name" value="" required>
                </div>
              </div>
              <div class="col-md-6">
                <label for="email" class="form-label">Email Address</label>
                <div class="input-group">
                  <span class="input-group-text"><i class="fas fa-envelope"></i></span>
                  <input type="email" class="form-control" id="email" value="" disabled>
                </div>
                <div class="form-text">Email cannot be changed</div>
              </div>
            </div>

            <div class="row mb-3">
              <div class="col-md-6">
                <label for="phone" class="form-label">Phone Number</label>
                <div class="input-group">
                  <span class="input-group-text"><i class="fas fa-phone"></i></span>
                  <input type="tel" class="form-control" id="phone" name="phone" value="" required>
                </div>
              </div>
              <div class="col-md-6">
                <label for="address" class="form-label">Address</label>
                <div class="input-group">
                  <span class="input-group-text"><i class="fas fa-map-marker-alt"></i></span>
                  <input type="text" class="form-control" id="address" name="address" value="" required>
                </div>
              </div>
            </div>

            <div class="row mb-3">
              <div class="col-md-6">
                <label for="specialization" class="form-label">Specialization</label>
                <select class="form-select" id="specialization" name="specialization" multiple required>
                  <option value="Engine Repair">Engine Repair</option>
                  <option value="Brake Systems">Brake Systems</option>
                  <option value="Electrical Systems">Electrical Systems</option>
                  <option value="Transmission">Transmission</option>
                  <option value="Tire Services">Tire Services</option>
                  <option value="Battery Services">Battery Services</option>
                  <option value="General Maintenance">General Maintenance</option>
                </select>
                <div class="form-text">Hold Ctrl/Cmd to select multiple specializations</div>
              </div>
              <div class="col-md-6">
                <div class="row">
                  <div class="col-md-6">
                    <label for="experience" class="form-label">Experience (Years)</label>
                    <input type="number" class="form-control" id="experience" name="experience" min="0" value="0" required>
                  </div>
                  <div class="col-md-6">
                    <label for="hourlyRate" class="form-label">Hourly Rate ($)</label>
                    <input type="number" class="form-control" id="hourlyRate" name="hourlyRate" min="0" step="0.01" value="0" required>
                  </div>
                </div>
              </div>
            </div>
          

            <div class="mb-4">
              <label class="form-label">Update Location</label>
              <!-- Update map container -->
              <div id="update-map" style="height: 300px; border-radius: 10px;"></div>
              <!-- Button to update location using geolocation -->
              <div class="mt-2">
                <button type="button" class="btn btn-outline-primary" id="updateLocationBtn">
                  <i class="fas fa-location-arrow me-2"></i>Use My Current Location
                </button>
              </div>
              <!-- Hidden fields to store coordinates -->
              <input type="hidden" id="latitude" name="latitude" value="0">
              <input type="hidden" id="longitude" name="longitude" value="0">
            </div>

            <div class="d-grid gap-2">
              <button type="submit" class="btn btn-primary">
                <i class="fas fa-save me-2"></i> Save Changes
              </button>
              <a href="/mechanic/dashboard" class="btn btn-outline-secondary">
                <i class="fas fa-arrow-left me-2"></i> Back to Dashboard
              </a>
            </div>
          </form>
        </div>
      </div>

      <!-- Change Password Card -->
      <div class="card border-0 shadow-sm mt-4">
        <div class="card-header bg-white">
          <h5 class="mb-0">
            <i class="fas fa-lock text-primary me-2"></i>Change Password
          </h5>
        </div>
        <div class="card-body p-4">
          <form action="/mechanic/change-password" method="POST">
            <div class="mb-3">
              <label for="currentPassword" class="form-label">Current Password</label>
              <div class="input-group">
                <span class="input-group-text"><i class="fas fa-lock"></i></span>
                <input type="password" class="form-control" id="currentPassword" name="currentPassword" required>
              </div>
            </div>

            <div class="row mb-3">
              <div class="col-md-6">
                <label for="newPassword" class="form-label">New Password</label>
                <div class="input-group">
                  <span class="input-group-text"><i class="fas fa-key"></i></span>
                  <input type="password" class="form-control" id="newPassword" name="newPassword" required>
                </div>
              </div>
              <div class="col-md-6">
                <label for="confirmPassword" class="form-label">Confirm New Password</label>
                <div class="input-group">
                  <span class="input-group-text"><i class="fas fa-key"></i></span>
                  <input type="password" class="form-control" id="confirmPassword" name="confirmPassword" required>
                </div>
              </div>
            </div>

            <div class="d-grid">
              <button type="submit" class="btn btn-primary">
                <i class="fas fa-key me-2"></i> Update Password
              </button>
            </div>
          </form>
        </div>
      </div>

      <!-- Certifications Card -->
      <div class="card border-0 shadow-sm mt-4">
        <div class="card-header bg-white">
          <h5 class="mb-0">
            <i class="fas fa-certificate text-primary me-2"></i>Certifications
          </h5>
        </div>
        <div class="card-body p-4">
            <div class="table-responsive" id="certifications-table" style="display: none;">
              <table class="table table-hover">
                <thead class="table-light">
                  <tr>
                    <th>Certification</th>
                    <th>Issuer</th>
                    <th>Year</th>
                  </tr>
                </thead>
                <tbody id="certifications-tbody">
                </tbody>
              </table>
            </div>
            <div id="no-certifications" class="text-center py-4">
              <p class="text-muted mb-0">No certifications added yet.</p>
            </div>
          
          <button type="button" class="btn btn-primary mt-3" data-bs-toggle="modal" data-bs-target="#addCertificationModal">
            <i class="fas fa-plus me-2"></i> Add Certification
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Add Certification Modal -->
<div class="modal fade" id="addCertificationModal" tabindex="-1" aria-labelledby="addCertificationModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="addCertificationModalLabel">Add Certification</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <form action="/mechanic/add-certification" method="POST">
        <div class="modal-body">
          <div class="mb-3">
            <label for="certName" class="form-label">Certification Name</label>
            <input type="text" class="form-control" id="certName" name="name" required>
          </div>
          <div class="mb-3">
            <label for="certIssuer" class="form-label">Issuer</label>
            <input type="text" class="form-control" id="certIssuer" name="issuer" required>
          </div>
          <div class="mb-3">
            <label for="certYear" class="form-label">Year</label>
            <input type="number" class="form-control" id="certYear" name="year" min="1900" max="2024" required>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="submit" class="btn btn-primary">Add Certification</button>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- JS Dependencies -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.2.0/js/bootstrap.bundle.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/leaflet.js"></script>
<script>
  document.addEventListener('DOMContentLoaded', function() {
    let profileData = {};
    let userLocation = { lat: 0, lng: 0 };

    // Fetch profile data
    fetch('/mechanic/api/profile')
      .then(response => response.json())
      .then(data => {
        profileData = data.profile;
        const user = data.user;

        // Populate profile info
        document.getElementById('profile-avatar').textContent = user.name.charAt(0).toUpperCase();
        document.getElementById('profile-name').textContent = user.name;
        document.getElementById('profile-email').textContent = user.email;
        document.getElementById('profile-experience').textContent = profileData.experience + ' years';
        document.getElementById('profile-rate').textContent = '$' + profileData.hourlyRate.toFixed(2);

        // Availability
        const availabilityEl = document.getElementById('profile-availability');
        const availabilityBtn = document.getElementById('availability-btn');
        const isAvailable = profileData.availability;
        availabilityEl.textContent = isAvailable ? 'Available' : 'Unavailable';
        availabilityEl.className = 'badge bg-' + (isAvailable ? 'success' : 'danger') + ' rounded-pill px-3 py-2 ms-2';
        availabilityBtn.className = 'btn btn-' + (isAvailable ? 'danger' : 'success') + ' w-100';
        availabilityBtn.innerHTML = '<i class="fas fa-' + (isAvailable ? 'times-circle' : 'check-circle') + ' me-2"></i>' +
          (isAvailable ? 'Set as Unavailable' : 'Set as Available');

        // Rating stars
        const ratingStars = document.getElementById('profile-rating-stars').children;
        const roundedRating = Math.round(profileData.rating);
        for (let i = 0; i < 5; i++) {
          ratingStars[i].className = 'fas fa-star ' + (i < roundedRating ? 'text-warning' : 'text-muted') + ' mx-1';
        }
        document.getElementById('profile-rating').textContent = '(' + profileData.rating.toFixed(1) + ')';

        // Member since
        document.getElementById('profile-member-since').textContent = new Date(user.createdAt).toLocaleDateString();

        // Populate form
        document.getElementById('name').value = user.name;
        document.getElementById('email').value = user.email;
        document.getElementById('phone').value = user.phone || '';
        document.getElementById('address').value = user.address || '';
        document.getElementById('experience').value = profileData.experience;
        document.getElementById('hourlyRate').value = profileData.hourlyRate;

        // Specializations
        const specializationSelect = document.getElementById('specialization');
        const specializations = profileData.specialization || [];
        for (let option of specializationSelect.options) {
          option.selected = specializations.includes(option.value);
        }

        // Location
        if (user.location && user.location.coordinates) {
          userLocation.lat = user.location.coordinates[1];
          userLocation.lng = user.location.coordinates[0];
        }

        // Certifications
        renderCertifications(profileData.certifications || []);

        // Initialize maps with location
        initializeMaps();
      })
      .catch(error => {
        console.error('Error fetching profile:', error);
      });

    // Fetch total jobs
    fetch('/mechanic/api/bookings/count')
      .then(response => response.json())
      .then(data => {
        document.getElementById('totalJobs').textContent = data.count || 0;
      })
      .catch(error => {
        console.error('Error fetching booking count:', error);
        document.getElementById('totalJobs').textContent = '0';
      });

    function renderCertifications(certifications) {
      const tbody = document.getElementById('certifications-tbody');
      const table = document.getElementById('certifications-table');
      const noCerts = document.getElementById('no-certifications');
      if (certifications.length > 0) {
        tbody.innerHTML = '';
        certifications.forEach(cert => {
          const row = tbody.insertRow();
          row.innerHTML = `
            <td>${cert.name}</td>
            <td>${cert.issuer}</td>
            <td>${cert.year}</td>
          `;
        });
        table.style.display = 'block';
        noCerts.style.display = 'none';
      } else {
        table.style.display = 'none';
        noCerts.style.display = 'block';
      }
    }

    function initializeMaps() {
      // Initialize mechanicMap for current location
      const mechanicMap = L.map('mechanic-map').setView([userLocation.lat, userLocation.lng], 13);
      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '© OpenStreetMap contributors'
      }).addTo(mechanicMap);

      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
          function (position) {
            const lat = position.coords.latitude;
            const lng = position.coords.longitude;
            mechanicMap.setView([lat, lng], 15);
            L.marker([lat, lng]).addTo(mechanicMap)
              .bindPopup("Your current location")
              .openPopup();
          },
          function (error) {
            console.error("Geolocation error:", error);
            L.marker([userLocation.lat, userLocation.lng]).addTo(mechanicMap)
              .bindPopup("Your location")
              .openPopup();
          }
        );
      } else {
        L.marker([userLocation.lat, userLocation.lng]).addTo(mechanicMap)
          .bindPopup("Your location")
          .openPopup();
      }

      // Initialize update location map
      const updateMap = L.map('update-map').setView([userLocation.lat, userLocation.lng], 13);
      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '© OpenStreetMap contributors'
      }).addTo(updateMap);

      // Add draggable marker for updating location
      const marker = L.marker([userLocation.lat, userLocation.lng], { draggable: true }).addTo(updateMap);
      document.getElementById('latitude').value = userLocation.lat;
      document.getElementById('longitude').value = userLocation.lng;

      marker.on('dragend', function(e) {
        const position = marker.getLatLng();
        document.getElementById('latitude').value = position.lat;
        document.getElementById('longitude').value = position.lng;

        // Try to get address from coordinates
        fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${position.lat}&lon=${position.lng}`)
          .then(response => response.json())
          .then(data => {
            if (data.display_name) {
              document.getElementById('address').value = data.display_name;
            }
          })
          .catch(error => console.error('Error getting address:', error));
      });

      // Update marker when address changes
      document.getElementById('address').addEventListener('change', function() {
        const address = this.value;
        fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(address)}`)
          .then(response => response.json())
          .then(data => {
            if (data.length > 0) {
              const lat = parseFloat(data[0].lat);
              const lng = parseFloat(data[0].lon);
              document.getElementById('latitude').value = lat;
              document.getElementById('longitude').value = lng;
              updateMap.setView([lat, lng], 15);
              marker.setLatLng([lat, lng]);
            }
          })
          .catch(error => console.error('Error geocoding address:', error));
      });

      document.getElementById('updateLocationBtn').addEventListener('click', function() {
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(
            function (position) {
              const lat = position.coords.latitude;
              const lng = position.coords.longitude;
              // Update map view and marker position
              updateMap.setView([lat, lng], 15);
              marker.setLatLng([lat, lng]);
              // Update hidden input fields
              document.getElementById('latitude').value = lat;
              document.getElementById('longitude').value = lng;
              // Optionally, reverse geocode to update the address field
              fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lng}`)
                .then(response => response.json())
                .then(data => {
                  if (data.display_name) {
                    document.getElementById('address').value = data.display_name;
                  }
                })
                .catch(error => console.error('Error reverse geocoding:', error));
            },
            function (error) {
              console.error("Geolocation error:", error);
              alert("Unable to retrieve your current location.");
            }
          );
        } else {
          alert("Geolocation is not supported by this browser.");
        }
      });
    }
  });
</script>
